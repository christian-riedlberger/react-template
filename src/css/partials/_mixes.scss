/**
*   GENERAL MIXES
*/
@mixin border-radius($radius) {
    -webkit-border-radius: $radius !important;
    -moz-border-radius: $radius !important;
    -ms-border-radius: $radius !important;
    border-radius: $radius !important;
}

@mixin card($radius) {
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15), -1px 0 0 rgba(0, 0, 0, 0.03),
        1px 0 0 rgba(0, 0, 0, 0.03), 0 1px 0 rgba(0, 0, 0, 0.12);
    background: $white;
    padding: $pad3;
    margin-bottom: 2.5em;
    position: relative;
}

@mixin transition($ease) {
    webkit-transition: $ease;
    -moz-transition: $ease;
    -o-transition: $ease;
    transition: $ease;
}

@mixin transparent($opacity) {
    zoom: 1;
    filter: alpha(opacity=$opacity);
    opacity: $opacity;
}

/**
*   BUTTON MIXES
*/
@mixin big-button($color) {
    border-bottom: 3px solid darken($color, 12%);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    padding: 0.75em 2em;
    border-radius: 0;
    font-weight: 600;
}

/**
*   ICON MIXES
*/
@mixin icon($img, $size) {
    background-image: url($img);
    background-size: $size;
}
@mixin fix($y, $x) {
    position: relative;
    top: $y;
    left: $x;
}

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(
        legacy-direction($direction),
        $color-stops
    );
    background: linear-gradient($direction, $color-stops);
}

/// Exam if `$value` is a valid direction
/// @param {*} $value - Value to exam
/// @return {Bool}
@function is-direction($value) {
    $is-keyword: index(
        (
            to top,
            to top right,
            to right top,
            to right,
            to bottom right,
            to right bottom,
            to bottom,
            to bottom left,
            to left bottom,
            to left,
            to left top,
            to top left
        ),
        $value
    );
    $is-angle: type-of($value) == 'number' and
        index('deg' 'grad' 'turn' 'rad', unit($value));

    @return $is-keyword or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
    @if is-direction($value) == false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }

    $conversion-map: (
        to top: bottom,
        to top right: bottom left,
        to right top: left bottom,
        to right: left,
        to bottom right: top left,
        to right bottom: left top,
        to bottom: top,
        to bottom left: top right,
        to left bottom: right top,
        to left: right,
        to left top: right bottom,
        to top left: bottom right
    );

    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }

    @return 90deg - $value;
}
